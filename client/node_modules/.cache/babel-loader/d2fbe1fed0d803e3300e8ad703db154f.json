{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dee\\\\Desktop\\\\test-deploy\\\\client\\\\src\\\\components\\\\UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport axios from 'axios';\nimport { Form, Card, Container, Button } from 'react-bootstrap';\nimport { Multiselect } from 'multiselect-react-dropdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UpdateProduct = () => {\n  _s();\n\n  const history = useHistory();\n  const [categoriesList, setCategoriesList] = useState([]);\n  const [selectedFiles, setSelectedFiles] = useState(null);\n  const [error, setError] = useState(false);\n  const {\n    id\n  } = useParams();\n  const [values, setValues] = useState({\n    price: '',\n    title: '',\n    condition: '',\n    categories: [],\n    description: ''\n  });\n  useEffect(() => {\n    fetchData();\n    fetchCategories();\n  }, []);\n\n  async function fetchData() {\n    try {\n      const response = await axios.get(`${process.env.REACT_APP_API_URL}/products/${id}`);\n      setValues(response.data);\n    } catch (error) {\n      setError(true);\n      console.log('error:', error);\n    }\n  }\n\n  async function fetchCategories() {\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/categories`);\n      const categoryList = res.data.map(category => category.name);\n      setCategoriesList(categoryList);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    try {\n      const videoRequests = [];\n      const imageRequests = [];\n\n      if (selectedFiles !== null) {\n        for (const file of selectedFiles) {\n          const formData = new FormData();\n          formData.append('file', file);\n          formData.append('folder', process.env.REACT_APP_UPLOAD_FOLDER);\n          formData.append('upload_preset', process.env.REACT_APP_UPLOAD_PRESET);\n          const [type] = file.type.split('/');\n          const url = `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUD_NAME}`;\n          if (type === 'video') videoRequests.push(axios.post(`${url}/video/upload`, formData));\n          if (type === 'image') imageRequests.push(axios.post(`${url}/image/upload`, formData));\n        }\n\n        const videoResponses = await axios.all(videoRequests);\n        const imageResponses = await axios.all(imageRequests);\n        values.videos = videoResponses.map(response => response.data.secure_url);\n        values.images = imageResponses.map(response => response.data.secure_url);\n      }\n\n      const response = await axios.patch(`${process.env.REACT_APP_API_URL}/products/update/${values._id}`, values);\n\n      if (response.status === 200) {\n        alert('Product Updated');\n        history.push('/account');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"d-flex align-items-center justify-content-center \",\n    style: {\n      minHeight: '75vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '22rem'\n        },\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            className: \"text-center mb-4\",\n            children: \"Update Product\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: e => e.preventDefault,\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                name: \"title\",\n                value: values.title,\n                onChange: e => {\n                  setValues({ ...values,\n                    title: e.target.value\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                min: \"0\",\n                required: true,\n                step: \"any\",\n                name: \"price\",\n                type: \"number\",\n                value: values.price,\n                onChange: e => {\n                  setValues({ ...values,\n                    price: Number(e.target.value)\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n              label: \"New\",\n              type: \"radio\",\n              name: \"condition\",\n              checked: values.condition === 'new',\n              onChange: () => {\n                setValues({ ...values,\n                  condition: 'new'\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"radio\",\n              label: \"Like new\",\n              name: \"condition\",\n              checked: values.condition === 'like new',\n              onChange: () => {\n                setValues({ ...values,\n                  condition: 'like new'\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n              type: \"radio\",\n              name: \"condition\",\n              label: \"Fairly used\",\n              checked: values.condition === 'fairly used',\n              onChange: () => {\n                setValues({ ...values,\n                  condition: 'fairly used'\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                as: \"textarea\",\n                name: \"description\",\n                style: {\n                  height: '100px'\n                },\n                value: values.description,\n                onChange: e => {\n                  setValues({ ...values,\n                    description: e.target.value\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), values.categories.length !== 0 && /*#__PURE__*/_jsxDEV(Multiselect, {\n              isObject: false,\n              options: categoriesList,\n              placeholder: \"Categories\",\n              avoidHighlightFirstOption: true,\n              selectedValues: values.categories.map(category => category.name),\n              onSelect: selected => {\n                values.categories = selected;\n              },\n              style: {\n                chips: {\n                  background: 'var(--color-main)'\n                },\n                optionContainer: {\n                  borderRadius: '.5rem'\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.File, {\n              multiple: true,\n              type: \"file\",\n              accept: \"image/*, video/*\",\n              onChange: e => setSelectedFiles(e.target.files)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              style: {\n                background: 'var(--color-main)',\n                color: 'white'\n              },\n              onClick: e => onSubmit(e),\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UpdateProduct, \"gg4t4kGcBRKZ8IlsY4tb1d4vPrw=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = UpdateProduct;\nexport default UpdateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProduct\");","map":{"version":3,"sources":["C:/Users/Dee/Desktop/test-deploy/client/src/components/UpdateProduct.js"],"names":["React","useState","useEffect","useParams","useHistory","axios","Form","Card","Container","Button","Multiselect","UpdateProduct","history","categoriesList","setCategoriesList","selectedFiles","setSelectedFiles","error","setError","id","values","setValues","price","title","condition","categories","description","fetchData","fetchCategories","response","get","process","env","REACT_APP_API_URL","data","console","log","res","categoryList","map","category","name","onSubmit","e","preventDefault","videoRequests","imageRequests","file","formData","FormData","append","REACT_APP_UPLOAD_FOLDER","REACT_APP_UPLOAD_PRESET","type","split","url","REACT_APP_CLOUD_NAME","push","post","videoResponses","all","imageResponses","videos","secure_url","images","patch","_id","status","alert","minHeight","width","target","value","Number","height","length","selected","chips","background","optionContainer","borderRadius","files","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { Form, Card, Container, Button } from 'react-bootstrap';\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\n\r\nconst UpdateProduct = () => {\r\n  const history = useHistory();\r\n  const [categoriesList, setCategoriesList] = useState([]);\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [error, setError] = useState(false);\r\n  const { id } = useParams();\r\n  const [values, setValues] = useState({\r\n    price: '',\r\n    title: '',\r\n    condition: '',\r\n    categories: [],\r\n    description: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  async function fetchData() {\r\n    try {\r\n      const response = await axios.get(\r\n        `${process.env.REACT_APP_API_URL}/products/${id}`,\r\n      );\r\n      setValues(response.data);\r\n    } catch (error) {\r\n      setError(true);\r\n      console.log('error:', error);\r\n    }\r\n  }\r\n\r\n  async function fetchCategories() {\r\n    try {\r\n      const res = await axios.get(\r\n        `${process.env.REACT_APP_API_URL}/categories`,\r\n      );\r\n\r\n      const categoryList = res.data.map((category) => category.name);\r\n\r\n      setCategoriesList(categoryList);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  async function onSubmit(e) {\r\n    e.preventDefault();\r\n    try {\r\n      const videoRequests = [];\r\n      const imageRequests = [];\r\n\r\n      if (selectedFiles !== null) {\r\n        for (const file of selectedFiles) {\r\n          const formData = new FormData();\r\n\r\n          formData.append('file', file);\r\n          formData.append('folder', process.env.REACT_APP_UPLOAD_FOLDER);\r\n          formData.append('upload_preset', process.env.REACT_APP_UPLOAD_PRESET);\r\n\r\n          const [type] = file.type.split('/');\r\n          const url = `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUD_NAME}`;\r\n\r\n          if (type === 'video')\r\n            videoRequests.push(axios.post(`${url}/video/upload`, formData));\r\n          if (type === 'image')\r\n            imageRequests.push(axios.post(`${url}/image/upload`, formData));\r\n        }\r\n\r\n        const videoResponses = await axios.all(videoRequests);\r\n        const imageResponses = await axios.all(imageRequests);\r\n\r\n        values.videos = videoResponses.map(\r\n          (response) => response.data.secure_url,\r\n        );\r\n        values.images = imageResponses.map(\r\n          (response) => response.data.secure_url,\r\n        );\r\n      }\r\n      const response = await axios.patch(\r\n        `${process.env.REACT_APP_API_URL}/products/update/${values._id}`,\r\n        values,\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        alert('Product Updated');\r\n        history.push('/account');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container\r\n      className=\"d-flex align-items-center justify-content-center \"\r\n      style={{ minHeight: '75vh' }}\r\n    >\r\n      <div>\r\n        <Card style={{ width: '22rem' }}>\r\n          <Card.Body>\r\n            <Card.Title className=\"text-center mb-4\">Update Product</Card.Title>\r\n            <Form onSubmit={(e) => e.preventDefault}>\r\n              <Form.Group>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"title\"\r\n                  value={values.title}\r\n                  onChange={(e) => {\r\n                    setValues({ ...values, title: e.target.value });\r\n                  }}\r\n                />\r\n              </Form.Group>\r\n              <br />\r\n\r\n              <Form.Group>\r\n                <Form.Control\r\n                  min=\"0\"\r\n                  required\r\n                  step=\"any\"\r\n                  name=\"price\"\r\n                  type=\"number\"\r\n                  value={values.price}\r\n                  onChange={(e) => {\r\n                    setValues({ ...values, price: Number(e.target.value) });\r\n                  }}\r\n                />\r\n              </Form.Group>\r\n              <br />\r\n\r\n              <Form.Check\r\n                label=\"New\"\r\n                type=\"radio\"\r\n                name=\"condition\"\r\n                checked={values.condition === 'new'}\r\n                onChange={() => {\r\n                  setValues({ ...values, condition: 'new' });\r\n                }}\r\n              />\r\n\r\n              <Form.Check\r\n                type=\"radio\"\r\n                label=\"Like new\"\r\n                name=\"condition\"\r\n                checked={values.condition === 'like new'}\r\n                onChange={() => {\r\n                  setValues({ ...values, condition: 'like new' });\r\n                }}\r\n              />\r\n\r\n              <Form.Check\r\n                type=\"radio\"\r\n                name=\"condition\"\r\n                label=\"Fairly used\"\r\n                checked={values.condition === 'fairly used'}\r\n                onChange={() => {\r\n                  setValues({ ...values, condition: 'fairly used' });\r\n                }}\r\n              />\r\n              <br />\r\n\r\n              <Form.Group>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  as=\"textarea\"\r\n                  name=\"description\"\r\n                  style={{ height: '100px' }}\r\n                  value={values.description}\r\n                  onChange={(e) => {\r\n                    setValues({ ...values, description: e.target.value });\r\n                  }}\r\n                />\r\n              </Form.Group>\r\n              {values.categories.length !== 0 && (\r\n                <Multiselect\r\n                  isObject={false}\r\n                  options={categoriesList}\r\n                  placeholder=\"Categories\"\r\n                  avoidHighlightFirstOption={true}\r\n                  selectedValues={values.categories.map(\r\n                    (category) => category.name,\r\n                  )}\r\n                  onSelect={(selected) => {\r\n                    values.categories = selected;\r\n                  }}\r\n                  style={{\r\n                    chips: { background: 'var(--color-main)' },\r\n                    optionContainer: {\r\n                      borderRadius: '.5rem',\r\n                    },\r\n                  }}\r\n                />\r\n              )}\r\n\r\n              <Form.File\r\n                multiple\r\n                type=\"file\"\r\n                accept=\"image/*, video/*\"\r\n                onChange={(e) => setSelectedFiles(e.target.files)}\r\n              />\r\n              <Button\r\n                style={{ background: 'var(--color-main)', color: 'white' }}\r\n                onClick={(e) => onSubmit(e)}\r\n                type=\"submit\"\r\n              >\r\n                Save\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateProduct;\r\n"]},"metadata":{},"sourceType":"module"}