{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Dee/Desktop/test-deploy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Dee/Desktop/test-deploy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/Dee/Desktop/test-deploy/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import axios from'axios';import{Card,Dropdown}from'react-bootstrap';import AddressForm from'../components/AddressForm';import{AuthContext}from'../context/AuthContext';import React,{useState,useContext,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var AddressesDropdown=function AddressesDropdown(_ref){var getShippingAddress=_ref.getShippingAddress;var _useContext=useContext(AuthContext),user=_useContext.user;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),addresses=_useState2[0],setAddresses=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),shippingAddress=_useState4[0],setShippingAddress=_useState4[1];useEffect(function(){return fetchAddresses();},[shippingAddress]);var fetchAddresses=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(\"\".concat(process.env.REACT_APP_API_URL,\"/addresses/all/\").concat(user._id));case 2:response=_context.sent;setAddresses(response.data.addresses);case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchAddresses(){return _ref2.apply(this,arguments);};}();var handleClick=function handleClick(e){var selectedAddress=addresses.find(function(address){return address._id===e.target.id;});setShippingAddress(selectedAddress);};var getNewAddress=function getNewAddress(address){return setShippingAddress(address);};// set it on the parent component (checkoutPage) if the user choose one of the recent addresses\ngetShippingAddress(shippingAddress);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(Dropdown,{children:[/*#__PURE__*/_jsx(Dropdown.Toggle,{id:\"addresses_dropdown\",style:{marginBlock:'1rem',background:'var(--color-main)'},children:\"Choose an address\"}),/*#__PURE__*/_jsxs(Dropdown.Menu,{onClick:handleClick,children:[addresses&&addresses.map(function(address){return/*#__PURE__*/_jsx(Dropdown.Item,{id:address._id,children:\"\".concat(address.street_name,\" \").concat(address.building_number,\" \").concat(address.extension,\",\\n                  \").concat(address.post_code,\" \").concat(address.city,\" - \").concat(address.country)},address._id);}),shippingAddress&&/*#__PURE__*/_jsx(Dropdown.Item,{id:\"new\",children:\"Add new shipping address\"})]})]}),shippingAddress?/*#__PURE__*/_jsxs(Card,{style:cardStyles,children:[/*#__PURE__*/_jsx(Card.Header,{className:\"card-header\",children:\"Shipping Address\"}),shippingAddress&&/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(Card.Text,{children:\"\".concat(shippingAddress.first_name?shippingAddress.first_name:shippingAddress.last_name?'':user.first_name,\" \\n                \").concat(shippingAddress.last_name?shippingAddress.last_name:shippingAddress.first_name?'':user.last_name)}),/*#__PURE__*/_jsx(Card.Text,{children:\"\".concat(shippingAddress.street_name,\" \").concat(shippingAddress.building_number,\" \").concat(shippingAddress.extension,\",\")}),/*#__PURE__*/_jsx(Card.Text,{children:\"\".concat(shippingAddress.post_code,\" \").concat(shippingAddress.city,\" - \").concat(shippingAddress.country)}),shippingAddress.comment&&/*#__PURE__*/_jsx(Card.Text,{children:\"\".concat(shippingAddress.comment)})]})]}):// get it from the child component (addressForm) if the user choose to add new one\n!shippingAddress&&/*#__PURE__*/_jsx(AddressForm,{getNewAddress:getNewAddress})]});};var cardStyles={marginBottom:'10px',borderColor:'var(--color-main)'};export default AddressesDropdown;","map":{"version":3,"sources":["C:/Users/Dee/Desktop/test-deploy/client/src/components/AddressesDropdown.js"],"names":["axios","Card","Dropdown","AddressForm","AuthContext","React","useState","useContext","useEffect","AddressesDropdown","getShippingAddress","user","addresses","setAddresses","shippingAddress","setShippingAddress","fetchAddresses","get","process","env","REACT_APP_API_URL","_id","response","data","handleClick","e","selectedAddress","find","address","target","id","getNewAddress","marginBlock","background","map","street_name","building_number","extension","post_code","city","country","cardStyles","first_name","last_name","comment","marginBottom","borderColor"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { Card, Dropdown } from 'react-bootstrap';\r\nimport AddressForm from '../components/AddressForm';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport React, { useState, useContext, useEffect } from 'react';\r\n\r\nconst AddressesDropdown = ({ getShippingAddress }) => {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const [addresses, setAddresses] = useState(null);\r\n  const [shippingAddress, setShippingAddress] = useState(null);\r\n\r\n  useEffect(() => fetchAddresses(), [shippingAddress]);\r\n\r\n  const fetchAddresses = async () => {\r\n    const response = await axios.get(`${process.env.REACT_APP_API_URL}/addresses/all/${user._id}`);\r\n\r\n    setAddresses(response.data.addresses);\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n    const selectedAddress = addresses.find((address) => address._id === e.target.id);\r\n\r\n    setShippingAddress(selectedAddress);\r\n  };\r\n\r\n  const getNewAddress = (address) => setShippingAddress(address);\r\n\r\n  // set it on the parent component (checkoutPage) if the user choose one of the recent addresses\r\n  getShippingAddress(shippingAddress);\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <Dropdown>\r\n        <Dropdown.Toggle\r\n          id=\"addresses_dropdown\"\r\n          style={{ marginBlock: '1rem', background: 'var(--color-main)' }}\r\n        >\r\n          Choose an address\r\n        </Dropdown.Toggle>\r\n\r\n        <Dropdown.Menu onClick={handleClick}>\r\n          {addresses &&\r\n            addresses.map((address) => (\r\n              <Dropdown.Item id={address._id} key={address._id}>\r\n                {`${address.street_name} ${address.building_number} ${address.extension},\r\n                  ${address.post_code} ${address.city} - ${address.country}`}\r\n              </Dropdown.Item>\r\n            ))}\r\n\r\n          {shippingAddress && <Dropdown.Item id=\"new\">Add new shipping address</Dropdown.Item>}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n\r\n      {shippingAddress ? (\r\n        <Card style={cardStyles}>\r\n          <Card.Header className=\"card-header\">Shipping Address</Card.Header>\r\n          {shippingAddress && (\r\n            <Card.Body>\r\n              <Card.Text>{`${\r\n                shippingAddress.first_name\r\n                  ? shippingAddress.first_name\r\n                  : shippingAddress.last_name\r\n                  ? ''\r\n                  : user.first_name\r\n              } \r\n                ${\r\n                  shippingAddress.last_name\r\n                    ? shippingAddress.last_name\r\n                    : shippingAddress.first_name\r\n                    ? ''\r\n                    : user.last_name\r\n                }`}</Card.Text>\r\n\r\n              <Card.Text>{`${shippingAddress.street_name} ${shippingAddress.building_number} ${shippingAddress.extension},`}</Card.Text>\r\n\r\n              <Card.Text>{`${shippingAddress.post_code} ${shippingAddress.city} - ${shippingAddress.country}`}</Card.Text>\r\n              {shippingAddress.comment && <Card.Text>{`${shippingAddress.comment}`}</Card.Text>}\r\n            </Card.Body>\r\n          )}\r\n        </Card>\r\n      ) : (\r\n        // get it from the child component (addressForm) if the user choose to add new one\r\n        !shippingAddress && <AddressForm getNewAddress={getNewAddress} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst cardStyles = {\r\n  marginBottom: '10px',\r\n  borderColor: 'var(--color-main)',\r\n};\r\n\r\nexport default AddressesDropdown;\r\n"]},"metadata":{},"sourceType":"module"}